Projekt

Databasschema. Tabeller och kolumner i databasen, med tillräckliga förklaringar för att man ska kunna förstå vad innehållet betyder. Ett diagram över schemat i en eller annan form är utmärkt att ha – det gör det lättare att prata om – men inget absolut krav.
Den första tabellen som gruppen har gjort är Anslutningar. Till den finns kolumnerna avgångsland, avgångsstad, avgångsadress, ankomstland, ankomststad och ankomstadress. Här är primärnycklarna avgångsland, avgångsstad, ankosmtland och ankomststad. Denna tabell har syftet att snabbt och lätt kunna presentera vilka resor som användaren kan välja mellan. 
Tabellen Resa finns även och är en av de längre tabellerna. Här finns information om resor vilket gör att mycket information kommer att finnas med. Kolumnerna innehåller all information som finns om individuella resor.   

Redogörelse vad ni använt för att bygga applikationen. Programspråk, kodbibliotek osv.
De tekniker som gruppen har valt att använda är Node.js och Json. Dessa är biblotek som finns i Javascript. Node.js är ett ramverk som förenklar kommunikation mellan databasen och övriga delar av applikationen. Med Node.js så kan filer returneras för att presentera användaren med ett grafiskt gränssnitt det formatet som gruppen valt här är dust filer. Med dust så kan alla sidor få samma header och footer samtidigt som sidans body kan ändras efter behov. Bootstrap används för sin smidighet vid design av webbsidor.  


Kortfattad överblick över applikationens komponenter, från programmerarens perspektiv, och beskrivning vad de gör.
Appen börjar med att definiera beroende som t.ex. databasen och dust hanterare. Efter det så etablerar Node.js en anslutning till databasen med användare, lösenord och adress. Sedan laddas fler dust beroende in och public folderns väg definieras. Efter det så laddas huvudsidan tillsammans med databasen. Efter det så är det kommer det paths som finns att navigera till. Dessa returnerar en dust template och hanterar eventuella errors som kan förekomma när hemsidan laddas in. Efter det så kommer en postgresql sats som kommunicerar med databasen. Detta kan vara en select, insert eller update sats för att funktionen ska få önskad effekt på databasen. Det kommer att finnas lämplig logik i programmet vid varje path. Detta kan innebära en if sats som kontrollerar att användaren inte kan köpa fler resor än vad som finns tillgängliga. Dust filer har även Node.js kod i sig då detta används för att visa information från databasen.   

Kortfattad beskrivning av hur man använder er applikation (eller era applikationer) från användarperspektiv.
Användaren går in på hemsidan där den har ett antal olika val. Användaren har möjligheten att titta på tillgängliga resor. Där finns information om datum, avgångsland, ankomstland och mycket mer. Det finns även en sida där användaren kan se vilka som är registrerade samt en sida för vilka städer och länder som resor finns i. En sida för vilka chaufförer finns även. Användaren får även möjligheten att söka efter specifika resor och destinationer. Användaren kan söka efter resor för att snabbt få den relevanta information som den är ute efter. Samt så kan användaren se vilka resor som är köpta för att verifiera att deras köp har g
