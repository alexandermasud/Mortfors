Projekt

Databasschema. Tabeller och kolumner i databasen, med tillräckliga förklaringar för att man ska kunna förstå vad innehållet betyder. Ett diagram över schemat i en eller annan form är utmärkt att ha – det gör det lättare att prata om – men inget absolut krav.

Redogörelse vad ni använt för att bygga applikationen. Programspråk, kodbibliotek osv.
De tekniker som gruppen har valt att använda är Node.js och Json. Dessa är biblotek som finns i Javascript. Node.js är ett ramverk som förenklar kommunikation mellan databasen och övriga delar av applikationen. Med Node.js så kan filer returneras för att presentera användaren med ett grafiskt gränssnitt det formatet som gruppen valt här är dust filer. Med dust så kan alla sidor få samma header och footer samtidigt som sidan innehåll kan ändras. Bootstrap används för sin smidighet vid design av websidor. Json används för att beskriva vilka objekt som ska finnas med i Node.js samt allmän information som t.ex. författare och länk till github. Json konverterar alla objekt som finns till text för att kommunicera med servern vilket gör att komplicerade parsings kan ignoreras.     


Kortfattad överblick över applikationens komponenter, från programmerarens perspektiv, och beskrivning vad de gör.
Appen börjar med att definiera beroende som t.ex. databasen och dust hanterare. Efter det så etablerar Node.js en anslutning till databasen med användare, lösenord och adress. Sedan laddas fler dust beroende in och public folderns väg definieras. Efter det så laddas huvudsidan tillsammans med databasen. Efter det så är det kommer det paths som finns att navigera till. Dessa returnerar en dust template och hanterar eventuella errors som kan förekomma när hemsidan laddas in. Efter det så kommer en postgresql sats som kommunicerar med databasen. Detta kan vara en select, insert eller update sats för att funktionen ska få önskad effekt på databasen. Applikationen kommer även att returnera en ny dust fil för att hjälpa användaren att navigera till rätt del. Här följer information från databasen med så att användaren kan se t.ex. resorna igen efter ett köp.    

Kortfattad beskrivning av hur man använder er applikation (eller era applikationer) från användarperspektiv.
Användaren går in på hemsidan där den har ett antal olika val. Användaren har möjligheten att titta på tillgängliga resor. Där finns information om datum, avgångsland, ankomstland och mycket mer. Det finns även en sida där användaren kan se vilka som är registrerade samt en sida för vilka städer och länder som resor finns i. En sida för vilka chaufförer finns även. Användaren får även möjligheten att söka efter specifika resor och destinationer. Användaren kan även gå och köpa sidor där man får välja resans id samt hur många platser som kunden vill köpa. Sedan kan kunden navigera till sidan där köpta resor finns för att kontrollera att köpet har gått igenom som det ska.  
